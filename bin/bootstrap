#!/usr/bin/env python3

import os
import json

DATA_TOKENS = (
    ('project_name', 'project name (and name of package)'),
    ('project_description', 'project description'),
    ('developer_fullname', 'developer/author full name'),
    ('developer_email', 'developer email'),
    ('developer_login', 'developer github login'),
    ('python_requires', 'python_requires'),
)

DATA_TOKENS_DEFAULT = {
    'python_requires': '>=3.8',
}

# "personal" data tokens that can be memorised for next bootstraps (user profile ls ~/.local/share/ppm.json)
USER_DATA_FILE = os.path.join(os.path.expanduser("~"), '.local', 'share', 'ppm.json')
USER_DATA_TOKENS = ('developer_fullname', 'developer_email', 'developer_login')

# files that are required in template, if any missing an alert will be raised before bootstrapping
FILES = (
    '.gitignore',
    '.pylintrc',
    '.version.txt',
    'CHANGES.txt',
    'LICENSE.txt',
    'pyproject.toml',
    'README.md',
    'requirements.dev.txt',
    'requirements.txt',
    'setup.cfg',
    'setup.py',
)

# DIRS that are required in template, if any missing an alert will be raised before bootstrapping
DIRS = (
    'bin',
    'docs',
    'src/{project_name}',
    'tests',
)

def prompt(prompt_message: str, description='', default='', required=False):
    """ask for template tokens values"""
    assert isinstance(prompt_message, str) and prompt_message

    if description:
        print(description)

    default_str = f' [{default}]' if default else ''
    response = input(f'{prompt_message}{default_str}:')
    if not response:
        response = default
    print(response or '--none--')

    if not response and required:
        return prompt(prompt_message=prompt_message, description=description, default=default, required=required)

    return response

def confirm(check_phrase: str, description=''):
    """user must type exactly check_phrase to confirm"""
    assert isinstance(check_phrase, str) and check_phrase

    response = prompt(
        prompt_message=f'TO CONFIRM PLEASE TYPE EXACTLY {check_phrase}',
        description=description,
        required=False
    )
    res = response == check_phrase
    print('confirmed' if res else 'aborted')

    return res

class BootstrapController:
    def __init__(self):
        self.user_data = {}
        self.data = {}

    def load_user_data(self):
        """load user ppm profile data"""
        print('loading user data file...', USER_DATA_FILE)

        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, encoding='utf_8') as user_data_file:
                print('existing user data file found')
                self.user_data = json.loads(user_data_file.read())
                print(self.user_data)

    def save_user_data(self):
        """save user ppm profile data"""
        if confirm(
            check_phrase='yes',
            description='would you like to save your developer personal infos for next bootstraps'
        ):
            for key in USER_DATA_TOKENS:
                self.user_data[key] = self.data[key]

            user_data_content = json.dumps(self.user_data, indent=4)
            print('saving user data file...', USER_DATA_FILE)
            print(user_data_content)
            with open(USER_DATA_FILE, 'w', encoding='utf_8') as user_data_file:
                self.user_data = user_data_file.write(user_data_content)

    def set_data(self):
        """set template tokens data (prompts)"""
        description=''

        data_default = {**DATA_TOKENS_DEFAULT, **self.user_data}

        for token in DATA_TOKENS:
            self.data[token[0]] = prompt(
                prompt_message=token[1],
                description=description,
                default=data_default.get(token[0], False),
                required=True,
            )
        print(self.data)

    def main(self):
        """main"""
        #
        # get data to substitute in template
        #
        self.load_user_data()
        self.set_data()
        if not self.user_data:
            self.save_user_data()

BootstrapController().main()
