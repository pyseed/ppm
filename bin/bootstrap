#!/usr/bin/env python3
"""bootstrap command"""

import os
import json
import shutil
import glob
from string import Template

DATA_TOKENS = (
    ('project_name', 'project name (and name of package)'),
    ('project_description', 'project description'),
    ('developer_fullname', 'developer/author full name'),
    ('developer_email', 'developer email'),
    ('developer_login', 'developer github login'),
    ('python_requires', 'python_requires'),
)

DATA_TOKENS_DEFAULT = {
    'python_requires': '>=3.8',
}

# "personal" data tokens that can be memorised for next bootstraps
# (user profile ls ~/.local/share/ppm.json)
USER_DATA_FILE = os.path.join(os.path.expanduser("~"), '.local', 'share', 'ppm.json')
USER_DATA_TOKENS = ('developer_fullname', 'developer_email', 'developer_login')

# files that are required in template, if any missing an alert will be raised
FILES = (
    '.gitignore',
    '.pylintrc',
    'CHANGES.txt',
    'LICENSE.txt',
    'pyproject.toml',
    'README.md',
    'requirements.dev.txt',
    'requirements.txt',
    'setup.cfg',
    'setup.py',
)

# folders that are required in template, if any missing an alert will be raised
DIRS = (
    'bin',
    'docs',
    'src/{project_name}',
    'tests',
)

class PpmBootstrapException(Exception):
    """invalid exception (checks)"""

def prompt(prompt_message: str, description='', default='', required=False):
    """ask for template tokens values"""
    assert isinstance(prompt_message, str) and prompt_message

    if description:
        print(description)

    default_str = f' [{default}]' if default else ''
    response = input(f'{prompt_message}{default_str}:')
    if not response:
        response = default
    print(response or '--none--')

    if not response and required:
        return prompt(
            prompt_message=prompt_message,
            description=description,
            default=default, required=required
        )

    return response

def confirm(check_phrase: str, description=''):
    """user must type exactly check_phrase to confirm"""
    assert isinstance(check_phrase, str) and check_phrase

    response = prompt(
        prompt_message=f'TO CONFIRM PLEASE TYPE EXACTLY {check_phrase}',
        description=description,
        required=False
    )
    res = response == check_phrase
    print('confirmed' if res else 'aborted')

    return res

def substitute_file(file_path, data):
    """
    from template, replace ${key} with value from data dict
    @return resolved template
    """
    print(f'substitute file: {file_path}')

    new_content = ''
    with open(file_path, encoding='utf_8') as file_r:
        new_content = Template(file_r.read()).safe_substitute(**data)

    if new_content:
        with open(file_path, 'w', encoding='utf_8') as file_w:
            file_w.write(new_content)
            print('  file updated')

class PpmBootstrapController:
    """bootstrap controller"""
    def __init__(self):
        """init"""
        self.user_data = {}
        self.data = {}

    def load_user_data(self):
        """load user ppm profile data"""
        print('loading user data file...', USER_DATA_FILE)

        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, encoding='utf_8') as user_data_file:
                print('existing user data file found')
                self.user_data = json.loads(user_data_file.read())
                print(self.user_data)

    def save_user_data(self):
        """save user ppm profile data"""
        for key in USER_DATA_TOKENS:
            self.user_data[key] = self.data[key]

        user_data_content = json.dumps(self.user_data, indent=4)
        print('saving user data file...', USER_DATA_FILE)
        print(user_data_content)
        with open(USER_DATA_FILE, 'w', encoding='utf_8') as user_data_file:
            user_data_file.write(user_data_content)

    def set_data(self):
        """set template tokens data (prompts)"""
        description=''

        data_default = {**DATA_TOKENS_DEFAULT, **self.user_data}

        for token in DATA_TOKENS:
            self.data[token[0]] = prompt(
                prompt_message=token[1],
                description=description,
                default=data_default.get(token[0], False),
                required=True,
            )
        print(self.data)

    def check_files(self):
        """check required files exist"""

        invalid_dirs = []
        for directory in DIRS:
            if not os.path.exists(directory):
                invalid_dirs.append(directory)
            if not os.path.isdir(directory):
                invalid_dirs.append(directory)
        if invalid_dirs:
            raise PpmBootstrapException(
                'missing (or not a directory) expected folders',
                ','.join(invalid_dirs)
            )

        invalid_files = []
        for file in FILES:
            if not os.path.exists(file):
                invalid_files.append(file)
            if not os.path.isfile(file):
                invalid_files.append(file)
        if invalid_files:
            raise PpmBootstrapException(
                'missing (or not a file) expected files',
                ','.join(invalid_files)
            )

    def substitute_files(self):
        """substitute files"""
        if confirm(
            check_phrase='yes',
            description='docs/*.md, src/*.py, tests/*.py plus following files will be updated (token substitution):\n' \
                + "\n - ".join(FILES)
        ):
            for template_file in FILES:
                substitute_file(template_file, self.data)

            # rename package source directory
            print('rename package folder src/{project_name} -> src/' + self.data['project_name'])
            shutil.move(
                os.path.join('src', '{project_name}'),
                os.path.join('src', self.data['project_name'])
            )

            # substitute doc files
            for md_file in glob.glob('docs/*.md', recursive=True):
                substitute_file(md_file, self.data)

            # substitute python files
            py_files = glob.glob('src/*.py', recursive=True) + glob.glob('tests/*.py', recursive=True)
            for py_file in py_files:
                substitute_file(py_file, self.data)

    def main(self):
        """main"""
        #
        # get data to substitute in template
        #
        self.load_user_data()
        self.set_data()
        if not self.user_data:
            if confirm(
                check_phrase='yes',
                description= \
                    'would you like to save your developer personal infos for next bootstraps'
            ):
                self.save_user_data()

        #
        # substitute files
        #
        self.check_files()  # check required files exist
        self.substitute_files()  # substitute files

        # set default version file
        if not os.path.exists('.version.txt'):
            with open('.version.txt', encoding='utf_8') as version_file:
                version_file.write('0.1.0')

if __name__ == '__main__':
    PpmBootstrapController().main()
